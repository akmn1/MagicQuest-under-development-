2024 3.2 
 立项:
    核心功能实现计划
    1. 壁纸更换
    技术实现：使用Python操作系统库如os和ctypes来更改桌面背景。支持静态（如JPEG、PNG格式）和动态（如GIF格式或视频格式）壁纸。
    用户界面：通过GUI框架提供一个界面，让用户选择壁纸或上传自定义壁纸。
    2. 鼠标样式定制
    技术实现：利用Windows API (ctypes库) 更改鼠标指针样式，支持用户上传的样式和预设样式。
    用户界面：提供一个简易的上传和预览界面，使用户能够查看并选择鼠标样式。
    3. AI绘制壁纸
    技术实现：集成OpenAI API，根据用户输入的描述，调用AI模型自动生成壁纸。
    用户界面：提供一个文本输入框，用户输入描述后，显示AI生成的壁纸预览。
    4. 语音命令
    技术实现：使用Google Speech-to-Text API来实现语音识别功能，将语音指令转换为文本，再执行相应的操作。
    用户交互：集成一个始终听取的语音识别模块，允许用户通过语音指令控制软件功能。
    5. 社区分享
    技术实现：开发一个简单的在线平台，允许用户上传、分享和下载壁纸及鼠标样式。使用服务器来存储用户上传的内容，并提供下载功能。
    用户界面：提供一个社区界面，列出可下载的资源，并允许用户上传自己的创作。
    拓展功能
    1. 桌面宠物
    技术实现：使用GUI框架创建动画宠物，可以响应用户的点击或者拖动操作。
    用户交互：提供宠物选择和自定义选项，如更改宠物外观或添加新动作。
    2. 语音操作电脑文件
    技术实现：扩展语音命令功能，使用语音识别库解析命令，执行如打开文件、删除文件等操作。
    用户交互：提供语音操作的指令集和反馈机制，确保用户可以方便地通过语音管理文件。
    技术选型与项目管理
    编程语言：Python。
    图形界面框架：考虑到易用性和美观度，可以选用PyQt或wxPython。
    AI模型：使用OpenAI API进行文字转图片。
    语音识别：Google Speech-to-Text API。
    项目管理：采用看板方法，确保任务的可视化和流程的灵活性。
    环境搭建要求
    设置Python开发环境，安装必要的开发工具和库。
    根据选择的GUI框架，安装对应的库和依赖。
    集成AI模型和语音识别功能所需的API或库。
    项目交付物
    可执行的软件安装包。
    用户使用手册和在线帮助文档。
    开发文档，包括设计文档、需求规格说明书和API文档。
    这个概述应该为您的AI模型提供了一个清晰的项目框架，帮助快速上手环境搭建和编程工作。



2024 3.4 
    python环境搭建已经完成


2024 3.4 
进行软件架构搭建
   参考:
    1. 分层架构
    将软件分成几个层次，每个层次负责不同的功能，这有助于降低模块之间的耦合度，提高系统的可维护性和可扩展性。

    界面层（Presentation Layer）：负责与用户交互，展示数据和响应用户操作。
    业务逻辑层（Business Logic Layer）：处理软件的核心功能，如壁纸更换、鼠标样式定制、AI绘制壁纸等。
    数据访问层（Data Access Layer）：负责与数据相关的操作，如存取用户设置、上传的壁纸和鼠标样式等。
    集成层（Integration Layer）：负责与外部服务或API的通信，如OpenAI API和Google Speech-to-Text API。
    2. 模块化设计
    为了提高代码的重用性和可维护性，软件应该被划分为多个模块，每个模块负责一组相近的功能。

    壁纸模块：管理壁纸的更换、预览和用户自定义壁纸功能。
    鼠标样式模块：实现鼠标指针样式的更改和自定义。
    AI壁纸模块：集成AI模型，提供基于用户描述生成壁纸的功能。
    语音命令模块：实现语音识别功能，解析用户的语音命令并执行相应操作。
    社区模块：构建社区功能，允许用户上传、分享和下载资源。
    桌面宠物模块（拓展功能）：实现桌面宠物的显示和交互。
    文件管理模块（拓展功能）：通过语音命令管理电脑文件。
    3. 第三方服务集成
    AI服务：选择合适的AI服务（如OpenAI）进行文字到图片的转换。
    语音识别服务：集成Google Speech-to-Text API或其他语音识别服务来实现语音命令功能。
    4. 用户界面设计
    跨平台兼容：选择一个支持跨平台的GUI框架（如PyQt或wxPython）以确保软件可以在不同的Windows版本上运行。
    用户体验：设计简洁直观的用户界面，确保用户可以轻松访问所有功能。
    5. 安全性和性能
    安全性：确保用户数据的安全，比如加密用户上传的数据。
    性能：优化代码和选择高性能的库，确保软件运行流畅。

进行GUI库的比对和选择 初步暂定为 pyQt

设计模块
    核心框架模块
        负责整个应用的启动、初始化和主要事件循环。这是整个应用的基础。
        包括主窗口的创建和主要的UI布局。
    
    壁纸管理模块和鼠标样式模块
        实现壁纸的更换、预览和用户自定义壁纸功能。
        支持静态和动态壁纸的应用和管理。
    
    鼠标样式模块
        用于更改和自定义鼠标指针样式。
        支持预设样式和用户上传样式。
    
    AI绘制壁纸模块
        集成AI模型，提供根据用户描述自动生成壁纸的功能。
        需要与AI服务（如OpenAI API）进行集成。
        
    语音命令模块
        实现语音识别功能，允许用户通过语音命令控制软件。
        集成语音识别服务（如Google Speech-to-Text API）。
        
    社区交流模块
        构建社区功能，允许用户上传、分享和下载资源。
        包括用户认证、资源管理和下载功能。
        
    设置和配置模块
        管理软件的设置和用户偏好。
        包括壁纸设置、鼠标样式选择、语音命令激活选项等。
    {开发优先级}
        核心框架模块：这是项目的基础，首先开发。确保应用可以启动并显示主窗口。

        壁纸管理模块和鼠标样式模块：这两个模块是您项目的核心功能，应该优先开发。它们为用户提供最直接的价值。

        AI绘制壁纸模块：鉴于这一模块可能涉及到与外部API的集成，可以作为第三步进行开发。这个模块将为您的应用添加一个独特的卖点。

        语音命令模块：随着应用的核心功能稳定后，可以开始集成语音命令，为用户提供更多交互方式。

        社区交流模块：构建社区功能可以促进用户之间的互动，但由于其复杂性，可以稍后开发。

        设置和配置模块：这一模块贯穿整个开发过程，随着其他模块的完成而逐步完善。

{分层设计}
    1. 表示层（Presentation Layer）
    职责：处理所有与用户界面相关的逻辑，如用户输入的接收和数据的展示。
    内容：包含GUI组件，如窗口、对话框、按钮等，以及与用户交互的代码。
    目的：确保用户界面的逻辑与业务逻辑分离，便于独立更新和维护UI。
    2. 业务逻辑层（Business Logic Layer）
    职责：实现软件的核心功能，如壁纸更换逻辑、鼠标样式更改、AI壁纸生成等。
    内容：包含处理应用程序核心功能的类和方法，不涉及数据存储和直接的用户界面表示。
    目的：集中处理应用程序的业务规则，使得业务逻辑独立于用户界面和数据访问代码。
    3. 数据访问层（Data Access Layer）
    职责：管理与数据相关的操作，如配置文件的读写、网络请求、数据库操作等。
    内容：包含访问数据库和执行查询的代码，或是与外部API（如OpenAI API、Google Speech-to-Text API）通信的代码。
    目的：提供一个简洁的API来进行数据操作，隔离业务逻辑和数据源之间的直接依赖。
    4. 服务层（Service Layer）
    职责：（可选）在业务逻辑层和表示层之间提供服务，如语音识别服务、AI服务等。
    内容：封装第三方服务的集成，如处理API调用和响应。
    目的：统一管理外部服务调用，简化业务逻辑层对服务的使用。

{数据流分析}
    1. 用户界面（表示层）到业务逻辑层
    用户操作：用户通过GUI进行各种操作，如选择壁纸、更改鼠标样式、输入文字生成AI壁纸、发出语音命令等。
    数据流向：用户界面收集用户输入的数据或操作请求，将这些信息传递到业务逻辑层进行处理。
    处理过程：业务逻辑层根据接收到的数据执行相应的功能，如更换壁纸、应用鼠标样式、调用AI模型生成壁纸、解析语音命令等。
    2. 业务逻辑层到数据访问层
    数据请求：业务逻辑层在执行某些操作时，可能需要访问或存储数据，如保存用户的壁纸选择、上传或下载社区资源等。
    数据流向：业务逻辑层将数据操作请求发送到数据访问层。
    处理过程：数据访问层负责与本地文件系统或网络资源进行交互，执行数据的读写、上传、下载等操作。
    3. 业务逻辑层与外部服务（服务层）
    服务调用：在需要使用外部服务（如OpenAI API、Google Speech-to-Text API）时，业务逻辑层会发起请求。
    数据流向：业务逻辑层通过服务层与外部服务进行通信。
    处理过程：服务层封装了与外部API交互的细节，接收业务逻辑层的请求，调用相应的外部服务，并将结果返回给业务逻辑层。
    4. 数据反馈到用户界面
    结果展示：业务逻辑层处理完成后，将结果反馈给用户界面。
    数据流向：从业务逻辑层到表示层。
    处理过程：用户界面根据业务逻辑层返回的结果更新UI，展示给用户，如显示新的壁纸、更新社区资源列表等。
    5. 异常和错误处理
    异常捕获：在数据流的任何环节出现异常或错误时，需要有机制捕获并处理这些异常。
    处理过程：异常信息应该被传递到用户界面，以友好的方式通知用户发生了错误。
    通过以上设计，我们确保了数据在应用程序各层和模块之间高效、有序地流动，同时也考虑了与外部服务的交互和异常处理。这样的数据流设计有助于提高软件的稳定性和用户体验。

2024 3.5 
啊啊啊 安装pyQt 和 Qt Designer

安装完成 环境变量配置完成!

前端后端通信手段:
    1. 直接函数调用
    在单体应用程序中，通常通过直接调用后端逻辑的函数或方法来实现前后端通信。前端GUI会触发事件（例如，用户点击按钮），然后直接调用处理该事件的后端代码。

    2. 信号与槽机制（对于Qt）
    PyQt和Qt框架提供了一个强大的信号和槽机制，用于对象之间的通信。当用户与前端界面互动时（例如点击一个按钮），一个信号会被发出。这个信号可以连接到一个槽（即一个函数或方法），当信号发出时，槽将被执行。

    3. 事件队列
    在复杂的应用程序中，可能会有一个事件队列或消息队列，前端发送请求（如用户操作），这些请求被添加到队列中，然后后端依次处理队列中的事件。

    4. 多线程或多进程
    如果后端处理需要较长时间且不希望阻塞GUI，您可能需要使用多线程或多进程。在这种情况下，后端运行在一个单独的线程或进程中，前端通过线程安全的消息传递机制与之通信。

    5. 使用外部服务
    如果您的应用程序需要与外部服务通信，如数据库服务或Web API（例如，OpenAI API或Google Speech-to-Text API），这通常通过HTTP请求完成。您的前端代码将发出请求并处理响应。

    6. 数据绑定
    在一些框架中，您可以使用数据绑定将前端界面组件与后端数据源连接起来。这样，数据的变更可以自动在界面上反映出来。

    7. 文件或数据库
    对于一些桌面应用程序，前端可能会直接读写本地文件或数据库，作为与后端逻辑通信的手段。

    开发考虑：
    数据序列化：在前后端通信时，您可能需要将数据序列化为JSON、XML或其他格式。
    异步处理：为了保证GUI的响应性，考虑异步执行后端操作，特别是涉及I/O或网络通信时。
    错误处理：设计健壮的错误处理机制，确保前端可以适当地响应后端发生的错误。

已经了解技术栈 采用socket通信

2024.3.6

变更技术栈 --决定采用 异步http通信
    优势:出于对ai处理信息速度的不信任 我认为异步http可以有效避免用户窗口冻结的情况 
         而且老子不想学socket(悲)

创建github储存库 防止崩盘(其实是这样看起来比较高大上)--唔,大概确实也方便了点
    储存库地址:https://github.com/akmn1/MagicQuest-under-development-.git

全图目光向我看齐!!!我宣布个事!!
    我们的软件命名为"魔旅--MagicQuest"  
    使用变形咒!(改鼠标)
    使用旅行魔法观赏风景(改壁纸)
    召唤画布精灵!!(ai绘画)
    言灵术!(语音识别)
    远古魔法档案馆--卷轴交流中心(社区服务)
    或许 还会邂逅永恒的旅行伙伴!(桌宠)--------我一定会把伊蕾娜桌宠做出来的! 和屑魔女一起旅行真是泰酷辣!

雄心壮志开始学习whisper模型!!!!
-
-
    使用了实例代码 貌似可以简化成为一个双向端口的函数 嗯 没问题
    淦 虚拟环境........
    ....
    能学会吗?  能学会的
    ....
    ....
    妈的学不会
-
-
-
[和llj同学就各种问题展开讨论并开了玩笑 好开心!!!!我永远不会忘记他的]


ai太几把难了 绕开ai 我们先搭建基础框架 
    python创建以下包
        config
        core
        view
        lib
        api
    编写了core 包中的第一个模块 background.py
        成功通过绝对路径更换了桌面壁纸

洗澡打游戏去啦